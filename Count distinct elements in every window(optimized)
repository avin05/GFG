class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        // code here 
      HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>(); 
      ArrayList<Integer> res=new ArrayList<Integer>();
  
        // Traverse the first window and store count 
        // of every element in hash map 
        for (int i = 0; i < k; i++) 
            hM.put(A[i], hM.getOrDefault(A[i], 0) + 1); 
  
        // Print count of first window 
        res.add(hM.size()); 
  
        // Traverse through the remaining array 
        for (int i = k; i < A.length; i++) { 
  
            // Remove first element of previous window 
            // If there was only one occurrence 
            if (hM.get(A[i - k]) == 1) { 
                hM.remove(A[i - k]); 
            } 
  
            else // reduce count of the removed element 
                hM.put(A[i - k],  hM.get(A[i - k]) - 1);             
  
            // Add new element of current window 
            // If this element appears first time, 
            // set its count as 1, 
            hM.put(A[i], hM.getOrDefault(A[i], 0) + 1); 
  
            // Print count of current window 
           res.add(hM.size());
        }
           
           return res;
        
    }
}

